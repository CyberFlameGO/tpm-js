// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "util.h"

#include <string>
#include <vector>

#include "tss2_tpm2_types.h"

#include <gtest/gtest.h>

namespace tpm_js {
namespace {

TEST(UtilTest, TestKDFaBits128) {
  const std::vector<uint8_t> key = {'y', 'o', 'l', 'o', 0};
  const std::string label = "IDENTITY";
  const std::vector<uint8_t> context_u = {'k', 'e', 'k', 0};
  const std::vector<uint8_t> context_v = {'y', 'o', 'y', 'o', 0};
  const int bits = 128;
  const std::vector<uint8_t> expected = {0xd2, 0xd7, 0x2c, 0xc7, 0xa8, 0xa5,
                                         0xeb, 0x09, 0xe8, 0xc7, 0x90, 0x12,
                                         0xe2, 0xda, 0x9f, 0x22};
  auto result =
      Util::KDFa(TPM2_ALG_SHA256, key, label, context_u, context_v, bits);
  EXPECT_EQ(expected, result);
}

TEST(UtilTest, TestKDFaBits1024) {
  const std::vector<uint8_t> key = {'c', 'a', 0};
  const std::string label = "IDENTITY";
  const std::vector<uint8_t> context_u = {'a', 'b', 'c', 0};
  const std::vector<uint8_t> context_v = {};
  const int bits = 1024;
  const std::vector<uint8_t> expected = {
      0x1a, 0xae, 0x71, 0x51, 0xac, 0x1a, 0x56, 0x90, 0xed, 0xa7, 0xdc, 0xab,
      0xd5, 0x68, 0x00, 0xc1, 0x1c, 0x56, 0xa3, 0x81, 0x0b, 0xa0, 0x59, 0x82,
      0x6f, 0xe4, 0x77, 0x63, 0x48, 0xd6, 0xae, 0x8e, 0x5d, 0x5d, 0x18, 0xc7,
      0xcc, 0xf8, 0x37, 0x3f, 0x7b, 0x94, 0x2a, 0xda, 0x8b, 0x91, 0x2b, 0x12,
      0xda, 0x56, 0xfb, 0x37, 0xf6, 0x4b, 0x93, 0x58, 0x72, 0x84, 0x1e, 0xc0,
      0x7d, 0x38, 0xe1, 0xfb, 0x8e, 0x7e, 0xc8, 0x6e, 0xfc, 0xbf, 0xb4, 0x44,
      0x75, 0x6b, 0xc8, 0x86, 0x3f, 0x85, 0x8d, 0x26, 0x90, 0xa6, 0x21, 0xc9,
      0xaf, 0xb9, 0x83, 0xcd, 0x77, 0xe7, 0xa1, 0x04, 0x8a, 0xe1, 0xa7, 0x59,
      0x8a, 0xc8, 0x95, 0x32, 0x3d, 0x44, 0xc1, 0x02, 0x27, 0xaf, 0x0a, 0x00,
      0x14, 0x4c, 0xab, 0x55, 0x11, 0x10, 0x75, 0xdc, 0x6b, 0x72, 0xad, 0x6e,
      0xb1, 0x63, 0xc7, 0x45, 0x8b, 0x87, 0x8e, 0x8c};
  auto result =
      Util::KDFa(TPM2_ALG_SHA256, key, label, context_u, context_v, bits);
  EXPECT_EQ(expected, result);
}

} // namespace
} // namespace tpm_js
